(()=>{var __webpack_modules__={448:(module,__unused_webpack_exports,__webpack_require__)=>{eval("let waveEncoder = __webpack_require__(45)\n\nlet AudioContext = window.AudioContext || window.webkitAudioContext\n\nfunction createWorker (fn) {\n  let js = fn\n    .toString()\n    .replace(/^(\\(\\)\\s*=>|function\\s*\\(\\))\\s*{/, '')\n    .replace(/}$/, '')\n  let blob = new Blob([js])\n  return new Worker(URL.createObjectURL(blob))\n}\n\nfunction error (method) {\n  let event = new Event('error')\n  event.data = new Error('Wrong state for ' + method)\n  return event\n}\n\nlet context, processor\n\n/**\n * Audio Recorder with MediaRecorder API.\n *\n * @example\n * navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n *   let recorder = new MediaRecorder(stream)\n * })\n */\nclass MediaRecorder {\n  /**\n   * @param {MediaStream} stream The audio stream to record.\n   */\n  constructor (stream, config = null) {\n    /**\n     * The `MediaStream` passed into the constructor.\n     * @type {MediaStream}\n     */\n    this.stream = stream\n    this.config = config\n    /**\n     * The current state of recording process.\n     * @type {\"inactive\"|\"recording\"|\"paused\"}\n     */\n    this.state = 'inactive'\n\n    this.em = document.createDocumentFragment()\n    this.encoder = createWorker(MediaRecorder.encoder)\n\n    let recorder = this\n    this.encoder.addEventListener('message', e => {\n      let event = new Event('dataavailable')\n      event.data = new Blob([e.data], { type: recorder.mimeType })\n      recorder.em.dispatchEvent(event)\n      if (recorder.state === 'inactive') {\n        recorder.em.dispatchEvent(new Event('stop'))\n      }\n    })\n  }\n\n  /**\n   * Begins recording media.\n   *\n   * @param {number} [timeslice] The milliseconds to record into each `Blob`.\n   *                             If this parameter isnâ€™t included, single `Blob`\n   *                             will be recorded.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recordButton.addEventListener('click', () => {\n   *   recorder.start()\n   * })\n   */\n  start (timeslice) {\n    if (this.state !== 'inactive') {\n      return this.em.dispatchEvent(error('start'))\n    }\n\n    this.state = 'recording'\n\n    if (!context) {\n      context = new AudioContext(this.config)\n    }\n    this.clone = this.stream.clone()\n    this.input = context.createMediaStreamSource(this.clone)\n\n    if (!processor) {\n      processor = context.createScriptProcessor(2048, 1, 1)\n    }\n\n    let recorder = this\n\n    recorder.encoder.postMessage(['init', context.sampleRate])\n\n    processor.onaudioprocess = function (e) {\n      if (recorder.state === 'recording') {\n        recorder.encoder.postMessage([\n          'encode',\n          e.inputBuffer.getChannelData(0)\n        ])\n      }\n    }\n\n    this.input.connect(processor)\n    processor.connect(context.destination)\n\n    this.em.dispatchEvent(new Event('start'))\n\n    if (timeslice) {\n      this.slicing = setInterval(() => {\n        if (recorder.state === 'recording') recorder.requestData()\n      }, timeslice)\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stop media capture and raise `dataavailable` event with recorded data.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * finishButton.addEventListener('click', () => {\n   *   recorder.stop()\n   * })\n   */\n  stop () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('stop'))\n    }\n\n    this.requestData()\n    this.state = 'inactive'\n    this.clone.getTracks().forEach(track => {\n      track.stop()\n    })\n    this.input.disconnect()\n    return clearInterval(this.slicing)\n  }\n\n  /**\n   * Pauses recording of media streams.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * pauseButton.addEventListener('click', () => {\n   *   recorder.pause()\n   * })\n   */\n  pause () {\n    if (this.state !== 'recording') {\n      return this.em.dispatchEvent(error('pause'))\n    }\n\n    this.state = 'paused'\n    return this.em.dispatchEvent(new Event('pause'))\n  }\n\n  /**\n   * Resumes media recording when it has been previously paused.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * resumeButton.addEventListener('click', () => {\n   *   recorder.resume()\n   * })\n   */\n  resume () {\n    if (this.state !== 'paused') {\n      return this.em.dispatchEvent(error('resume'))\n    }\n\n    this.state = 'recording'\n    return this.em.dispatchEvent(new Event('resume'))\n  }\n\n  /**\n   * Raise a `dataavailable` event containing the captured media.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * this.on('nextData', () => {\n   *   recorder.requestData()\n   * })\n   */\n  requestData () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('requestData'))\n    }\n\n    return this.encoder.postMessage(['dump', context.sampleRate])\n  }\n\n  /**\n   * Add listener for specified event type.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The listener function.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recorder.addEventListener('dataavailable', e => {\n   *   audio.src = URL.createObjectURL(e.data)\n   * })\n   */\n  addEventListener (...args) {\n    this.em.addEventListener(...args)\n  }\n\n  /**\n   * Remove event listener.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The same function used in `addEventListener`.\n   *\n   * @return {undefined}\n   */\n  removeEventListener (...args) {\n    this.em.removeEventListener(...args)\n  }\n\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * @param {Event} event The event object.\n   *\n   * @return {boolean} Is event was no canceled by any listener.\n   */\n  dispatchEvent (...args) {\n    this.em.dispatchEvent(...args)\n  }\n}\n\n/**\n * The MIME type that is being used for recording.\n * @type {string}\n */\nMediaRecorder.prototype.mimeType = 'audio/wav'\n\n/**\n * Returns `true` if the MIME type specified is one the polyfill can record.\n *\n * This polyfill supports `audio/wav` and `audio/mpeg`.\n *\n * @param {string} mimeType The mimeType to check.\n *\n * @return {boolean} `true` on `audio/wav` and `audio/mpeg` MIME type.\n */\nMediaRecorder.isTypeSupported = mimeType => {\n  return MediaRecorder.prototype.mimeType === mimeType\n}\n\n/**\n * `true` if MediaRecorder can not be polyfilled in the current browser.\n * @type {boolean}\n *\n * @example\n * if (MediaRecorder.notSupported) {\n *   showWarning('Audio recording is not supported in this browser')\n * }\n */\nMediaRecorder.notSupported = !navigator.mediaDevices || !AudioContext\n\n/**\n * Converts RAW audio buffer to compressed audio files.\n * It will be loaded to Web Worker.\n * By default, WAVE encoder will be used.\n * @type {function}\n *\n * @example\n * MediaRecorder.prototype.mimeType = 'audio/ogg'\n * MediaRecorder.encoder = oggEncoder\n */\nMediaRecorder.encoder = waveEncoder\n\nmodule.exports = MediaRecorder\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///448\n")},45:module=>{eval("// Copied from https://github.com/chris-rudmin/Recorderjs\n\nmodule.exports = () => {\n  let BYTES_PER_SAMPLE = 2\n\n  let recorded = []\n\n  function encode (buffer) {\n    let length = buffer.length\n    let data = new Uint8Array(length * BYTES_PER_SAMPLE)\n    for (let i = 0; i < length; i++) {\n      let index = i * BYTES_PER_SAMPLE\n      let sample = buffer[i]\n      if (sample > 1) {\n        sample = 1\n      } else if (sample < -1) {\n        sample = -1\n      }\n      sample = sample * 32768\n      data[index] = sample\n      data[index + 1] = sample >> 8\n    }\n    recorded.push(data)\n  }\n\n  function dump (sampleRate) {\n    let bufferLength = recorded.length ? recorded[0].length : 0\n    let length = recorded.length * bufferLength\n    let wav = new Uint8Array(44 + length)\n    let view = new DataView(wav.buffer)\n\n    // RIFF identifier 'RIFF'\n    view.setUint32(0, 1380533830, false)\n    // file length minus RIFF identifier length and file description length\n    view.setUint32(4, 36 + length, true)\n    // RIFF type 'WAVE'\n    view.setUint32(8, 1463899717, false)\n    // format chunk identifier 'fmt '\n    view.setUint32(12, 1718449184, false)\n    // format chunk length\n    view.setUint32(16, 16, true)\n    // sample format (raw)\n    view.setUint16(20, 1, true)\n    // channel count\n    view.setUint16(22, 1, true)\n    // sample rate\n    view.setUint32(24, sampleRate, true)\n    // byte rate (sample rate * block align)\n    view.setUint32(28, sampleRate * BYTES_PER_SAMPLE, true)\n    // block align (channel count * bytes per sample)\n    view.setUint16(32, BYTES_PER_SAMPLE, true)\n    // bits per sample\n    view.setUint16(34, 8 * BYTES_PER_SAMPLE, true)\n    // data chunk identifier 'data'\n    view.setUint32(36, 1684108385, false)\n    // data chunk length\n    view.setUint32(40, length, true)\n\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let i = 0; i < recorded.length; i++) {\n      wav.set(recorded[i], i * bufferLength + 44)\n    }\n\n    recorded = []\n    postMessage(wav.buffer, [wav.buffer])\n  }\n\n  onmessage = e => {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1])\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1])\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Tb3VuZFNwaW5uZXIvLi9ub2RlX21vZHVsZXMvYXVkaW8tcmVjb3JkZXItcG9seWZpbGwvd2F2ZS1lbmNvZGVyL2luZGV4LmNqcz9lZDRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpcy1ydWRtaW4vUmVjb3JkZXJqc1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgbGV0IEJZVEVTX1BFUl9TQU1QTEUgPSAyXG5cbiAgbGV0IHJlY29yZGVkID0gW11cblxuICBmdW5jdGlvbiBlbmNvZGUgKGJ1ZmZlcikge1xuICAgIGxldCBsZW5ndGggPSBidWZmZXIubGVuZ3RoXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShsZW5ndGggKiBCWVRFU19QRVJfU0FNUExFKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBpbmRleCA9IGkgKiBCWVRFU19QRVJfU0FNUExFXG4gICAgICBsZXQgc2FtcGxlID0gYnVmZmVyW2ldXG4gICAgICBpZiAoc2FtcGxlID4gMSkge1xuICAgICAgICBzYW1wbGUgPSAxXG4gICAgICB9IGVsc2UgaWYgKHNhbXBsZSA8IC0xKSB7XG4gICAgICAgIHNhbXBsZSA9IC0xXG4gICAgICB9XG4gICAgICBzYW1wbGUgPSBzYW1wbGUgKiAzMjc2OFxuICAgICAgZGF0YVtpbmRleF0gPSBzYW1wbGVcbiAgICAgIGRhdGFbaW5kZXggKyAxXSA9IHNhbXBsZSA+PiA4XG4gICAgfVxuICAgIHJlY29yZGVkLnB1c2goZGF0YSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGR1bXAgKHNhbXBsZVJhdGUpIHtcbiAgICBsZXQgYnVmZmVyTGVuZ3RoID0gcmVjb3JkZWQubGVuZ3RoID8gcmVjb3JkZWRbMF0ubGVuZ3RoIDogMFxuICAgIGxldCBsZW5ndGggPSByZWNvcmRlZC5sZW5ndGggKiBidWZmZXJMZW5ndGhcbiAgICBsZXQgd2F2ID0gbmV3IFVpbnQ4QXJyYXkoNDQgKyBsZW5ndGgpXG4gICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcod2F2LmJ1ZmZlcilcblxuICAgIC8vIFJJRkYgaWRlbnRpZmllciAnUklGRidcbiAgICB2aWV3LnNldFVpbnQzMigwLCAxMzgwNTMzODMwLCBmYWxzZSlcbiAgICAvLyBmaWxlIGxlbmd0aCBtaW51cyBSSUZGIGlkZW50aWZpZXIgbGVuZ3RoIGFuZCBmaWxlIGRlc2NyaXB0aW9uIGxlbmd0aFxuICAgIHZpZXcuc2V0VWludDMyKDQsIDM2ICsgbGVuZ3RoLCB0cnVlKVxuICAgIC8vIFJJRkYgdHlwZSAnV0FWRSdcbiAgICB2aWV3LnNldFVpbnQzMig4LCAxNDYzODk5NzE3LCBmYWxzZSlcbiAgICAvLyBmb3JtYXQgY2h1bmsgaWRlbnRpZmllciAnZm10ICdcbiAgICB2aWV3LnNldFVpbnQzMigxMiwgMTcxODQ0OTE4NCwgZmFsc2UpXG4gICAgLy8gZm9ybWF0IGNodW5rIGxlbmd0aFxuICAgIHZpZXcuc2V0VWludDMyKDE2LCAxNiwgdHJ1ZSlcbiAgICAvLyBzYW1wbGUgZm9ybWF0IChyYXcpXG4gICAgdmlldy5zZXRVaW50MTYoMjAsIDEsIHRydWUpXG4gICAgLy8gY2hhbm5lbCBjb3VudFxuICAgIHZpZXcuc2V0VWludDE2KDIyLCAxLCB0cnVlKVxuICAgIC8vIHNhbXBsZSByYXRlXG4gICAgdmlldy5zZXRVaW50MzIoMjQsIHNhbXBsZVJhdGUsIHRydWUpXG4gICAgLy8gYnl0ZSByYXRlIChzYW1wbGUgcmF0ZSAqIGJsb2NrIGFsaWduKVxuICAgIHZpZXcuc2V0VWludDMyKDI4LCBzYW1wbGVSYXRlICogQllURVNfUEVSX1NBTVBMRSwgdHJ1ZSlcbiAgICAvLyBibG9jayBhbGlnbiAoY2hhbm5lbCBjb3VudCAqIGJ5dGVzIHBlciBzYW1wbGUpXG4gICAgdmlldy5zZXRVaW50MTYoMzIsIEJZVEVTX1BFUl9TQU1QTEUsIHRydWUpXG4gICAgLy8gYml0cyBwZXIgc2FtcGxlXG4gICAgdmlldy5zZXRVaW50MTYoMzQsIDggKiBCWVRFU19QRVJfU0FNUExFLCB0cnVlKVxuICAgIC8vIGRhdGEgY2h1bmsgaWRlbnRpZmllciAnZGF0YSdcbiAgICB2aWV3LnNldFVpbnQzMigzNiwgMTY4NDEwODM4NSwgZmFsc2UpXG4gICAgLy8gZGF0YSBjaHVuayBsZW5ndGhcbiAgICB2aWV3LnNldFVpbnQzMig0MCwgbGVuZ3RoLCB0cnVlKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tZm9yLWxvb3BcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlY29yZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3YXYuc2V0KHJlY29yZGVkW2ldLCBpICogYnVmZmVyTGVuZ3RoICsgNDQpXG4gICAgfVxuXG4gICAgcmVjb3JkZWQgPSBbXVxuICAgIHBvc3RNZXNzYWdlKHdhdi5idWZmZXIsIFt3YXYuYnVmZmVyXSlcbiAgfVxuXG4gIG9ubWVzc2FnZSA9IGUgPT4ge1xuICAgIGlmIChlLmRhdGFbMF0gPT09ICdlbmNvZGUnKSB7XG4gICAgICBlbmNvZGUoZS5kYXRhWzFdKVxuICAgIH0gZWxzZSBpZiAoZS5kYXRhWzBdID09PSAnZHVtcCcpIHtcbiAgICAgIGR1bXAoZS5kYXRhWzFdKVxuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45\n")}},__webpack_module_cache__={},inProgress,dataWebpackPrefix;function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var n=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.f={},__webpack_require__.e=e=>Promise.all(Object.keys(__webpack_require__.f).reduce(((n,t)=>(__webpack_require__.f[t](e,n),n)),[])),__webpack_require__.u=e=>e+".bundle.js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),inProgress={},dataWebpackPrefix="SoundSpinner:",__webpack_require__.l=(e,n,t)=>{if(inProgress[e])inProgress[e].push(n);else{var g,c;if(void 0!==t)for(var I=document.getElementsByTagName("script"),l=0;l<I.length;l++){var B=I[l];if(B.getAttribute("src")==e||B.getAttribute("data-webpack")==dataWebpackPrefix+t){g=B;break}}g||(c=!0,(g=document.createElement("script")).charset="utf-8",g.timeout=120,__webpack_require__.nc&&g.setAttribute("nonce",__webpack_require__.nc),g.setAttribute("data-webpack",dataWebpackPrefix+t),g.src=e),inProgress[e]=[n];var i=(n,t)=>{g.onerror=g.onload=null,clearTimeout(C);var c=inProgress[e];if(delete inProgress[e],g.parentNode&&g.parentNode.removeChild(g),c&&c.forEach((e=>e(t))),n)return n(t)},C=setTimeout(i.bind(null,void 0,{type:"timeout",target:g}),12e4);g.onerror=i.bind(null,g.onerror),g.onload=i.bind(null,g.onload),c&&document.head.appendChild(g)}},__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;__webpack_require__.g.importScripts&&(e=__webpack_require__.g.location+"");var n=__webpack_require__.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=e})(),(()=>{var e={179:0};__webpack_require__.f.j=(n,t)=>{var g=__webpack_require__.o(e,n)?e[n]:void 0;if(0!==g)if(g)t.push(g[2]);else{var c=new Promise(((t,c)=>{g=e[n]=[t,c]}));t.push(g[2]=c);var I=__webpack_require__.p+__webpack_require__.u(n),l=new Error;__webpack_require__.l(I,(t=>{if(__webpack_require__.o(e,n)&&(0!==(g=e[n])&&(e[n]=void 0),g)){var c=t&&("load"===t.type?"missing":t.type),I=t&&t.target&&t.target.src;l.message="Loading chunk "+n+" failed.\n("+c+": "+I+")",l.name="ChunkLoadError",l.type=c,l.request=I,g[1](l)}}),"chunk-"+n)}};var n=self.webpackChunkSoundSpinner=self.webpackChunkSoundSpinner||[],t=n.push.bind(n);n.push=n=>{for(var g,c,[I,l,B]=n,i=0,C=[];i<I.length;i++)c=I[i],__webpack_require__.o(e,c)&&e[c]&&C.push(e[c][0]),e[c]=0;for(g in l)__webpack_require__.o(l,g)&&(__webpack_require__.m[g]=l[g]);for(B&&B(__webpack_require__),t(n);C.length;)C.shift()()}})(),(()=>{eval('/**\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n const AudioRecorder = __webpack_require__(448);\nwindow.MediaRecorder = window.MediaRecorder || AudioRecorder || false;\nwindow.AudioContext = window.AudioContext // Default\n    || window.webkitAudioContext // Safari and old versions of Chrome\n    || false;\n\n\nPromise.all(/* AMD require */[__webpack_require__.e(626), __webpack_require__.e(413)]).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(393), __webpack_require__(574), __webpack_require__(503), __webpack_require__(672), __webpack_require__(748),__webpack_require__(55), __webpack_require__(563),\n\t__webpack_require__(317), __webpack_require__(587), __webpack_require__(255), __webpack_require__(725), __webpack_require__(602)]; (function(domReady, UserInterface, mainStyle, Waveform, Amplitude, Recorder, Player, Loader, StartAudioContext, Tone){\n\n    const Microphone = Tone.UserMedia;\n\n\tdomReady(function(){\n\t\tvar recordTime = 3;\n        var firstRecord = true;\n\t\tvar buttonTimeout  = -1;\n\t\tvar currentRotation = 0;\n\t\tvar rotationSpeed = 0;\n\t\tvar isDragging = false;\n\t\tvar dragSpeed = 0;\n        var computedSpeed = 0;\n\n        const meter = new Tone.Meter({\n\t\t\tchannels: 1,\n\t\t});\n        this.player = new Tone.Player().toDestination();\n        this.player.connect(meter);\n\n\n\t\t//INTERFACE////////////////////////////////////////////////\n\n\t\tvar interface = new UserInterface(recordTime * 1000, document.body);\n\n\t\tinterface.on("SpeedControllUpdate", function(speed){\n            rotationSpeed = speed;\n            if (Tone.Transport.state !== \'started\') {\n                Tone.Transport.start();\n            }\n\t\t});\n\n\t\tinterface.on("dragRateUpdate", function(drag){\n\t\t\tdragSpeed = (drag * 10);\n            // currentRotation += drag;\n            if (Tone.Transport.state !== \'started\') {\n                Tone.Transport.start();\n            }\n\t\t});\n\n\t\tinterface.on("StartWaveDrag", function(){\n            isDragging = true;\n            if (Tone.Transport.state !== \'started\') {\n                Tone.Transport.start();\n            }\n\t\t});\n\n\t\tinterface.on("EndWaveDrag", function(){\n\t\t\tdragSpeed = 0;\n\t\t\tisDragging = false;\n\t\t});\n\n\t\tinterface.on("StartRecord", (e) => {\n            if (Tone.Transport.state !== \'stopped\') {\n                Tone.Transport.stop();\n            }\n\t\t\trecorder.open(() => {\n                // buttonTimeout = setTimeout(function(){\n                //     console.log(\'stop it\')\n                //     recorder.stop();\n                // }, recordTime * 1000);\n\n                // this.player.buffer = null\n\t\t\t}, function(e){\n                //denied\n                interface.disableRecording();\n                window.parent.postMessage("error3","*");\n\t\t\t});\n\t\t});\n\n\t\tinterface.on("StopRecord", function(drag){\n            clearTimeout(buttonTimeout);\n            recorder.stop();\n            // Tone.Transport.scheduleRepeat((time) => {\n            //     player.start(time).stop(time + 0.1);\n            // }, "8n");\n            // //player.setBuffer(recorder.buffer);\n            // clearTimeout(buttonTimeout);\n            // Tone.Transport.start();\n\t\t});\n\n\t\tif (!Microphone.supported){\n\t\t\tinterface.disableRecording(function(){\n\t\t\t\t//unsupported\n\t\t\t\tconsole.log("unsupported");\n\t\t\t\twindow.parent.postMessage("error2","*");\n\t\t\t});\n\t\t}\n\n\n\t\t//AUDIO////////////////////////////////////////////////\n\n        var recorder = new Recorder(recordTime);\n\n\n\n        recorder.oncomplete = (buffer) => {\n            interface.stopRecording();\n            recorder.isRecording = false;\n            this.player.buffer = buffer;\n\n            if (Tone.Transport.state !== \'stopped\') {\n                this.player.unsync();\n            }\n            if (Tone.Transport.state !== \'stopped\') {\n                Tone.Transport.stop();\n            }\n            if (Tone.Transport.state !== \'started\') {\n                Tone.Transport.start();\n            }\n\n\n            this.player.sync().start(0);\n\n            Tone.Transport.loop = true;\n            Tone.Transport.loopStart = 0;\n            Tone.Transport.loopEnd = 3;\n\n\n            // this.transportId = Tone.Transport.scheduleRepeat((time) => {\n            //     //this.player.start(-0.5);\n            //     this.player.start(0);\n            // }, 0);\n\n            // Tone.Transport.loop = true;\n            // Tone.Transport.setLoopPoints(0, 3);\n\n\n            //player.reverse = true;\n            //player.playbackRate = 0.25;\n        }\n\n\t\tvar twoPI = Math.PI * 2;\n\n\t\tvar waveform = new Waveform(interface.waveDisplay, recorder, recorder.meterArray);\n\n\t\tfunction animateIn(){\n\t\t\t//bring everything in\n\t\t\tsetTimeout(function(){\n\t\t\t\tinterface.animateIn();\n\t\t\t\twaveform.animateIn(750);\n\t\t\t}, 100);\n        }\n\n        const buffer = new Tone.ToneAudioBuffer("audio/ladida.mp3", () => {\n           recorder.setBuffer(buffer);\n           recorder.oncomplete(buffer);\n\n            // var data = buffer.getChannelData(0);\n            buffer.getChannelData(0).forEach(i => {\n                recorder.meterArray.push(i)\n            })\n\n\n\t\t\twindow.parent.postMessage("loaded", "*");\n\t\t\t//send the ready message to the parent\n\t\t\tvar isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n\t\t\t//full screen button on iOS\n\t\t\tif (isIOS){\n\t\t\t\t// Tone.js fix audio context state on touch devices\n\t\t\t\twindow.addEventListener(\'touchstart\', function() {\n\t\t\t\t\tif (Tone.context.state !== \'running\') {\n\t\t\t\t\t\tTone.context.resume();\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t} else {\n\t\t\t\tanimateIn();\n\n\t\t\t\tdocument.documentElement.addEventListener(\'click\', function() {\n\t\t\t\t\tif (Tone.context.state !== \'running\') {\n\t\t\t\t\t\tTone.context.resume();\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t}\n\n\t\t\twindow.parent.postMessage("ready", "*");\n        });\n\n\n\t\t//LOOOOOOOOOP////////////////////////////////////////////////\n\t\tvar lastFrame = -1;\n\n\t\tvar rotationQuotient = (Math.PI * 2 / 1000);\n        var forwardDirection;\n        var cachedSpeed\n\t\tfunction loop(){\n\t\t\trequestAnimationFrame(loop);\n\t\t\tvar speed = parseFloat(rotationSpeed);\n\t\t\tif (isDragging){\n\t\t\t\tspeed = parseFloat(dragSpeed);\n\t\t\t}\n\t\t\tvar alpha = 0.05;\n\n            computedSpeed = alpha * speed + (1 - alpha) * computedSpeed;\n            this.player.playbackRate = Math.abs(computedSpeed)\n\n            var firstSwitch = false\n            if (forwardDirection && computedSpeed < 0) {\n                firstSwitch = true\n                Tone.Transport.position = 0\n            } else if (!forwardDirection && computedSpeed >= 0) {\n                firstSwitch = true\n                //Tone.Transport.position = 0\n            }\n\n\n            if (computedSpeed < 0) {\n                this.player.reverse = true;\n                forwardDirection = false;\n            } else {\n                this.player.reverse = false;\n                forwardDirection = true;\n            }\n            if (cachedSpeed !== speed) {\n                cachedSpeed = speed;\n                Tone.Transport.setLoopPoints(0, this.player.buffer.duration / this.player.playbackRate);\n            }\n\n            Amplitude.setRMS(meter.getValue());\n            //console.log(meter.getLevel())\n\n            if (speed === 0) {\n                if (Tone.Transport.state !== \'stopped\') {\n                    Tone.Transport.stop();\n                }\n            } else {\n                if (Tone.Transport.state !== \'started\') {\n                    Tone.Transport.start();\n                }\n            }\n\n            //console.log(\'set loop point\', this.player.buffer.duration / this.player.playbackRate)\n\n            // Tone.Transport.setLoopPoints(0, 3 / this.player.playbackRate);\n\n\n\t\t\tif (!recorder.isRecording){\n                const direction = (this.player.reverse) ? -1 : 1;\n                //waveform.setRotation(Tone.Transport.progress * Math.PI * 2 * direction);\n                //waveform.setRotation(Tone.Transport.progress * Math.PI * 2);\n                if (!isNaN(Tone.Transport.progress) && Tone.Transport.progress) {\n                    waveform.setRotation(Tone.Transport.progress * direction);\n                } else {\n                    waveform.setRotation(0);\n                }\n\t\t\t} else {\n\t\t\t\tthis.player.playbackRate = 0;\n\t\t\t\twaveform.setRotation(0);\n\t\t\t}\n\t\t}\n\t\tloop();\n\n\t});\n}).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);}).catch(__webpack_require__.oe);\nfunction map_range(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///842\n')})()})();